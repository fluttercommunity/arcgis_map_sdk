"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[5257],{15257:(e,t,o)=>{o.r(t),o.d(t,{executeRelationshipQuery:()=>l,executeRelationshipQueryForCount:()=>f});var r=o(2272),n=o(78888),a=o(21325),s=o(10536);function c(e,t){const o=e.toJSON();return o.objectIds&&(o.objectIds=o.objectIds.join(",")),o.orderByFields&&(o.orderByFields=o.orderByFields.join(",")),o.outFields&&!t?.returnCountOnly?o.outFields.includes("*")?o.outFields="*":o.outFields=o.outFields.join(","):delete o.outFields,o.outSR&&(o.outSR=(0,a.YX)(o.outSR)),o.dynamicDataSource&&(o.layer=JSON.stringify({source:o.dynamicDataSource}),delete o.dynamicDataSource),o}async function u(e,t,o={},r){const a=(0,s.z)({...e.query,f:"json",...r,...c(t,r)});return(0,n.A)(e.path+"/queryRelatedRecords",{...o,query:{...o.query,...a}})}var d=o(22671),i=o(26591);async function l(e,t,o){return t=i.default.from(t),async function(e,t,o){const r=await u(e,t,o),n=r.data,a=n.geometryType,s=n.spatialReference,c={};for(const e of n.relatedRecordGroups){const t={fields:void 0,objectIdFieldName:void 0,geometryType:a,spatialReference:s,hasZ:!!n.hasZ,hasM:!!n.hasM,features:e.relatedRecords};if(null!=e.objectId)c[e.objectId]=t;else for(const o of Object.keys(e))"relatedRecords"!==o&&(c[e[o]]=t)}return{...r,data:c}}((0,r.Dl)(e),t,o).then((e=>{const t=e.data,o={};return Object.keys(t).forEach((e=>o[e]=d.A.fromJSON(t[e]))),o}))}async function f(e,t,o){return t=i.default.from(t),async function(e,t,o){const r=await u(e,t,o,{returnCountOnly:!0}),n=r.data,a={};for(const e of n.relatedRecordGroups)null!=e.objectId&&(a[e.objectId]=e.count);return{...r,data:a}}((0,r.Dl)(e),t,{...o}).then((e=>e.data))}}}]);